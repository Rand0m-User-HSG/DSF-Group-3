##GBM##
  
--------------##Introduction##-------------

# In this script we perform a generalized a boosted regresion model 
# The goal is to predict the number of accidents in canton ZH on a particular day
# We test our results by performing 10-fold cross-validation
  
rm(list =ls())

# install.packages("gbm")
# install.packages("caret")

library(tidyverse)
library(gbm)
library(caret)

k = 10

pred = matrix(NA, nrow = nrow(X_matrix)/k, ncol = k)
yn_forecasted =  rep(NA, length(Y_vector))
sum_of_10_fold_cv_MSEs = 0
sum_of_10_fold_cv_MAEs = 0

# we load the covariate matrix with dummy variables that was produced in REGRESSION_covariate_matrix_with_dummy_variables.R
load("./Data/covariate_matrix_reg.RData") # the name of this matrix is X_matrix

# we load the Y_vector that was produced in REGRESSION_covariate_matrix_with_dummy_variables.R
load("./Data/Y_vector_regression.RData") # the name of this vector is Y_vector


--------------##Generalized boosted regression model##-------------
#gbm requires data frames

pred = matrix(NA, nrow = nrow(X_matrix)/k, ncol = k)
yn_forecasted =  rep(NA, length(Y_vector))
X_matrix <- data.frame(X_matrix)

model_gbm = gbm(Y_vector  ~., data = X_matrix  ,distribution = "gaussian",cv.folds = 10,
                shrinkage = .01, n.minobsinnode = 10,n.trees = 500)

pred = predict.gbm(model_gbm, X_matrix ,type = "link")

yn_forecasted <- pred
sum_of_10_fold_cv_MSEs = sum_of_10_fold_cv_MSEs + sum((Y_vector - yn_forecasted)^2, na.rm = T)  / (length(Y_vector))
sum_of_10_fold_cv_MAEs = sum_of_10_fold_cv_MAEs + mean(abs(Y_vector - yn_forecasted), na.rm = T)

# MSE_regression  = 9.987382
# MAE_regression = 2.47698


--------------##10-folds cross-validation##-------------

k = 10
error_MSE = 0
error_MAE = 0

pred = matrix(NA, nrow = nrow(X_matrix)/k, ncol = k)
yn_forecasted =  rep(NA, length(Y_vector))

for (i in 1:k) {
  
  
  yn = Y_vector[-((1+(i-1)*nrow(X_matrix)/k):(i*nrow(X_matrix)/k))]
  xn = data.frame(X_matrix[-((1+(i-1)*nrow(X_matrix)/k):(i*nrow(X_matrix)/k)),])
  xn_test = data.frame(X_matrix[(1+(i-1)*nrow(X_matrix)/k):(i*nrow(X_matrix)/k),])
  yn_test = Y_vector[(1+(i-1)*nrow(X_matrix)/k):(i*nrow(X_matrix)/k)]
  
  model_gbm = gbm(yn  ~., data = xn  ,distribution = "gaussian",cv.folds = 10,
                  shrinkage = .01, n.minobsinnode = 10,n.trees = 500)
  
  pred = predict.gbm(model_gbm, xn_test ,type = "link")
  
  yn_forecasted[(1+(i-1)*nrow(X_matrix)/k):(i*nrow(X_matrix)/k)] <- pred
  sum_of_10_fold_cv_MSEs = error_MSE + sum((Y_vector - yn_forecasted)^2, na.rm = T)  / (length(Y_vector))
  sum_of_10_fold_cv_MAEs = error_MAE + mean(abs(Y_vector - yn_forecasted), na.rm = T)
  # we use xn_test and yn_test to do the prodiction on fold i
  }

# sum_of_10_fold_cv_MSEs = 10.23737 (MSE_regression = 9.987382)
# sum_of_10_fold_cv_MAEs = 2.509269 (MAE_regression = 2.47698)

MSE_10_fold_cv = sum_of_10_fold_cv_MSEs / k
MAE_10_fold_cv = sum_of_10_fold_cv_MAEs / k

# MSE_10_fold_cv = 1.024888
# MAE_10_fold_cv = 0.2511079

--------------##Leave-one-out cross-validation##-------------

k = nrow(X_matrix) #perhaps -1
sum_of_LOO_cv_MSEs = 0 
sum_of_LOO_cv_MAEs = 0 

yn_forecasted =  rep(NA, length(Y_vector)/k) 

for (i in 1:k) {
  
  
  yn = Y_vector[-((1+(i-1)*nrow(X_matrix)/k):(i*nrow(X_matrix)/k))]
  xn = data.frame(X_matrix[-((1+(i-1)*nrow(X_matrix)/k):(i*nrow(X_matrix)/k)),])
  xn_test = data.frame(X_matrix[(1+(i-1)*nrow(X_matrix)/k):(i*nrow(X_matrix)/k),])
  yn_test = Y_vector[(1+(i-1)*nrow(X_matrix)/k):(i*nrow(X_matrix)/k)]
  
  model_gbm = gbm(yn  ~., data = xn  ,distribution = "gaussian",cv.folds = k,
                  shrinkage = .01, n.minobsinnode = 10, n.trees = 500)
  
  pred = predict.gbm(model_gbm, xn_test ,type = "link")
  
  yn_forecasted <- pred
  sum_of_LOO_cv_MSEs = sum_of_LOO_cv_MSEs + sum((yn_test - yn_forecasted)^2, na.rm = T)  / (length(yn_test)) 
  
  sum_of_LOO_cv_MAEs = sum_of_LOO_cv_MAEs + mean(abs(yn_test - yn_forecasted), na.rm = T)
  # we use xn_test and yn_test to do the prediction on fold i
}


MSE_LOO_cv = sum_of_LOO_cv_MSEs / k
MAE_LOO_cv = sum_of_LOO_cv_MSEs / k

# MSE_LOO_cv = 10.26497 
# MAE_LOO_cv = 2.509592

# Comparison to the errors without cross-validation
# MSE = 9.98923 
# MAE = 2.475934 

