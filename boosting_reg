----##GBM##---
  
rm(list =ls())

#install.packages("gbm")
#install.packages("caret")

library(gbm)
library(caret)

load("./Data/covariate_matrix_reg.RData")
load("./Data/Y_vector_regression.RData")

k = 10
num_degrees <- unique(Y_vector)
sum_of_10_fold_cv_MSEs = 0
sum_of_10_fold_cv_MAEs = 0

pred = matrix(NA, nrow = nrow(X_matrix)/k, ncol = k)
yn_forecasted =  rep(NA, length(Y_vector))

for (i in 1:k) {
  
  
  yn = Y_vector[-((1+(i-1)*nrow(X_matrix)/k):(i*nrow(X_matrix)/k))]
  xn = data.frame(X_matrix[-((1+(i-1)*nrow(X_matrix)/k):(i*nrow(X_matrix)/k)),])
  xn_test = data.frame(X_matrix[(1+(i-1)*nrow(X_matrix)/k):(i*nrow(X_matrix)/k),])
  yn_test = Y_vector[(1+(i-1)*nrow(X_matrix)/k):(i*nrow(X_matrix)/k)]
  
  model_gbm = gbm(yn  ~., data = xn  ,distribution = "gaussian",cv.folds = 10,
                  shrinkage = .01, n.minobsinnode = 10,n.trees = 500)
  
  pred = predict.gbm(model_gbm, xn_test ,type = "link")
  

  yn_forecasted[(1+(i-1)*nrow(X_matrix)/k):(i*nrow(X_matrix)/k)] <- pred
  sum_of_10_fold_cv_MSEs = sum_of_10_fold_cv_MSEs + sum((Y_vector - yn_forecasted)^2, na.rm = T)  / (length(Y_vector))
  sum_of_10_fold_cv_MAEs = sum_of_10_fold_cv_MAEs + mean(abs(Y_vector - yn_forecasted), na.rm = T)

}

MSE_10_fold_cv = sum_of_10_fold_cv_MSEs / k
MAE_10_fold_cv = sum_of_10_fold_cv_MAEs / k
